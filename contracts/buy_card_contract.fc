#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";
int min_tons_for_storage() asm "9000000 PUSHINT"; ;; 0.009 TON
;; Note that 2 * gas_consumptions is expected to be able to cover fees on both wallets (sender and receiver)
;; and also constant fees on inter-wallet interaction, in particular fwd fee on state_init transfer
;; that means that you need to reconsider this fee when:
;; a) jetton logic become more gas-heavy
;; b) jetton-wallet code (sent with inter-wallet message) become larger or smaller
;; c) global fee changes / different workchain
int gas_consumption() asm "9000000 PUSHINT"; ;; 0.0090 TON
(slice, slice, cell,cell, cell, cell, int, int, int, int) load_data() {
    slice ds = get_data().begin_parse();
    return (
    ds~load_msg_addr(),
    ds~load_msg_addr(), 
    ds~load_dict(), 
    ds~load_dict(), 
    ds~load_dict(), 
    ds~load_dict(),
    ds~load_uint(64),
    ds~load_uint(64),
    ds~load_uint(64),
    ds~load_uint(64));
}

() store_data( slice owner_address, slice monitor,cell dict_box, cell dict_save, cell dict_auto_merge, cell dict_lucky, int price_box,  int price_save, int price_auto_merge, int price_lucky ) impure {
    ;; slice sl  = dic.begin_parse();
    ;; cell dict_data = sl~load_dict();
    set_data(
        begin_cell()
        .store_slice(owner_address)
        .store_slice(monitor)
        .store_dict(dict_box)
        .store_dict(dict_save)
        .store_dict(dict_auto_merge)
        .store_dict(dict_lucky)
        .store_uint(price_box,64)
        .store_uint(price_save,64)
        .store_uint(price_auto_merge,64)
        .store_uint(price_lucky,64)
        .end_cell()
    );
}

() send_tokens(slice recipient, int amount, int query_id,slice jetton_wallet_aff) impure {
    ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, _,_,_) = load_data();
    ;; slice info_pool = info.begin_parse();
    ;; info_pool~load_msg_addr();
    ;; info_pool~load_uint(64);
    ;; slice jetton_wallet_aff = info_pool~load_msg_addr();
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_wallet_aff)
    .store_coins(0)
    .store_uint(1, 107);
  var msg_body = begin_cell()
            .store_uint(op::jetton_transfer(), 32) 
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(recipient)
            .store_slice(recipient)
            .store_uint(0, 1)
            .store_coins(4000000)
            .store_uint(0, 1)
        .end_cell();

  msg = msg.store_ref(msg_body);
  send_raw_message(msg.end_cell(), 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs
    int fwd_count = 1000000;

    int fee_gas = fwd_count + fwd_fee +  gas_consumption() + min_tons_for_storage();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ( slice owner_address,slice monitor_address,cell dict_box, cell dict_save, cell dict_auto_merge,cell dict_lucky,int price_box,  int price_save, int price_auto_merge, int price_lucky) = load_data();

    if (op == op::change_owner()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        store_data(new_owner, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  price_auto_merge,  price_lucky);
        return ();
    }

    if (op == op::change_monitor()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        slice new_monitor = in_msg_body~load_msg_addr();
        store_data(owner_address, new_monitor, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  price_auto_merge,  price_lucky);
        return ();
    }
    if (op == op::set_price_box()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int new_price = in_msg_body~load_uint(64);
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, new_price,  price_save,  price_auto_merge,  price_lucky);
        return ();
    }
    if (op == op::set_price_save()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int new_price = in_msg_body~load_uint(64);
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  new_price,  price_auto_merge,  price_lucky);
        return ();
    }
    if (op == op::set_price_auto_merge()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int new_price = in_msg_body~load_uint(64);
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  new_price,  price_lucky);
        return ();
    }
    if (op == op::set_price_lucky()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int new_price = in_msg_body~load_uint(64);
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  price_auto_merge,  new_price);
        return ();
    }
    if (op == op::claim_ton_monitor()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int withdraw_amount = in_msg_body~load_uint(64);
        throw_unless(400, withdraw_amount > 0);
        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(withdraw_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
        ;; claim remain
        return ();
    }

    if (op == op::claim_all_ton_monitor()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, monitor_address));
        [int withdraw_amount,_] = get_balance();
        throw_unless(400, withdraw_amount > gas_consumption());
        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(monitor_address)
                .store_coins(withdraw_amount - gas_consumption())
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
        ;; claim remain
        return ();
    }

    if (op == op::buy_20_box()) {
     
        int key = in_msg_body~load_uint(64);
        throw_unless(411, msg_value  >= (price_box + fee_gas));
        cell newcell = begin_cell().store_slice(sender_address).store_uint(1,64).store_uint(query_id,64).end_cell();
        dict_box~udict_set(256, key, newcell.begin_parse());
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  price_auto_merge,  price_lucky); 
        ;; claim remain
        int fee_return = msg_value - (price_box + fee_gas);
        if(fee_return > 0) {
            cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(fee_return)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
            send_raw_message(msg, 1);
        }
        cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(monitor_address)
                    .store_coins(price_box)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
        send_raw_message(msg, 1);
        return ();
    }

    if (op == op::buy_save_pearl()) {

        int key = in_msg_body~load_uint(64);
        int number_pearl = in_msg_body~load_uint(64);
        throw_unless(411, msg_value  >= (price_save * number_pearl + fee_gas));
        cell newcell = begin_cell().store_slice(sender_address).store_uint(number_pearl,64).store_uint(query_id,64).end_cell();
        dict_save~udict_set(256, key, newcell.begin_parse());
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  price_auto_merge,  price_lucky);
        ;; claim remain
        int fee_return = msg_value - (price_save * number_pearl  + fee_gas);
        if(fee_return > 0) {
            cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(fee_return)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
            send_raw_message(msg, 1);
        }
        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(monitor_address)
                .store_coins(price_save * number_pearl)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
        send_raw_message(msg, 1);
        return ();
    }

    if (op == op::buy_auto_merge()) {
        int key = in_msg_body~load_uint(64);
        throw_unless(411, msg_value  >= (price_auto_merge + fee_gas));
        cell newcell = begin_cell().store_slice(sender_address).store_uint(1,64).store_uint(query_id,64).end_cell();
        dict_auto_merge~udict_set(256, key, newcell.begin_parse());
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  price_auto_merge,  price_lucky);
        ;; claim remain
        int fee_return = msg_value - (price_auto_merge + fee_gas);
        if(fee_return > 0) {
            cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(fee_return)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
            send_raw_message(msg, 1);
        }
        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(monitor_address)
                .store_coins(price_auto_merge)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
        send_raw_message(msg, 1);
        return ();
    }

    if (op == op::buy_rock_lucky()) {
        int key = in_msg_body~load_uint(64);
        int number_pearl = in_msg_body~load_uint(64);
        throw_unless(411, msg_value  >= (price_lucky * number_pearl + fee_gas));
        cell newcell = begin_cell().store_slice(sender_address).store_uint(number_pearl,64).store_uint(query_id,64).end_cell();
        dict_lucky~udict_set(256, key, newcell.begin_parse());
        store_data(owner_address, monitor_address, dict_box, dict_save, dict_auto_merge, dict_lucky, price_box,  price_save,  price_auto_merge,  price_lucky);
        ;; claim remain
        int fee_return = msg_value - (price_lucky * number_pearl  + fee_gas);
        if(fee_return > 0) {
            cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)
                    .store_coins(fee_return)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .end_cell();
            send_raw_message(msg, 1);
        }
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(monitor_address)
            .store_coins(price_lucky * number_pearl)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
        return ();
    }

    throw(0xffffff);
}

;;
;;  GET Methods
;;

;; (slice, slice,slice,cell, int, int) get_reward_data() method_id {
;;   (slice usdt_address, slice owner_address, slice monitor,cell dic, int total_add, int budget) = load_data();
;;   return (usdt_address, owner_address,monitor, dic, total_add, budget);
;; }
(slice) get_dict_box(int key) method_id {
   ( slice owner_address, slice monitor,cell dict_box, cell dict_save, cell dict_auto_merge, cell dict_lucky, int price_box,  int price_save, int price_auto_merge, int price_lucky) = load_data();
    (slice payload, int success) = dict_box.udict_get?(256, key);
    throw_unless(98, success);

    ;; int valid_until = payload~load_uint(64);
    ;; slice add = payload~load_msg_addr();
    ;; int is_pay = payload~load_uint(64);
    return (payload);
}
(slice) get_dict_save(int key) method_id {
   ( slice owner_address, slice monitor,cell dict_box, cell dict_save, cell dict_auto_merge, cell dict_lucky, int price_box,  int price_save, int price_auto_merge, int price_lucky) = load_data();
    (slice payload, int success) = dict_save.udict_get?(256, key);
    throw_unless(98, success);

    ;; int valid_until = payload~load_uint(64);
    ;; slice add = payload~load_msg_addr();
    ;; int is_pay = payload~load_uint(64);
    return (payload);
}
(slice) get_dict_auto_merge(int key) method_id {
   ( slice owner_address, slice monitor,cell dict_box, cell dict_save, cell dict_auto_merge, cell dict_lucky, int price_box,  int price_save, int price_auto_merge, int price_lucky) = load_data();
    (slice payload, int success) = dict_auto_merge.udict_get?(256, key);
    throw_unless(98, success);

    ;; int valid_until = payload~load_uint(64);
    ;; slice add = payload~load_msg_addr();
    ;; int is_pay = payload~load_uint(64);
    return (payload);
}
(slice) get_dict_lucky(int key) method_id {
   ( slice owner_address, slice monitor,cell dict_box, cell dict_save, cell dict_auto_merge, cell dict_lucky, int price_box,  int price_save, int price_auto_merge, int price_lucky) = load_data();
    (slice payload, int success) = dict_lucky.udict_get?(256, key);
    throw_unless(98, success);

    ;; int valid_until = payload~load_uint(64);
    ;; slice add = payload~load_msg_addr();
    ;; int is_pay = payload~load_uint(64);
    return (payload);
}
(slice) get_address_monitor() method_id {
   ( slice owner_address, slice monitor,cell dict_box, cell dict_save, cell dict_auto_merge, cell dict_lucky, int price_box,  int price_save, int price_auto_merge, int price_lucky) = load_data();
    return (monitor);
}
(slice) get_address_owner() method_id {
   ( slice owner_address, slice monitor,cell dict_box, cell dict_save, cell dict_auto_merge, cell dict_lucky, int price_box,  int price_save, int price_auto_merge, int price_lucky) = load_data();
    return (owner_address);
}
;; (int) get_token_remain() method_id {
;;    (slice usdt_address, slice owner_address, slice monitor,  cell dic,int total_add, int budget) = load_data();
;;     int amount = budget - total_add;
;;     ;; int valid_until = payload~load_uint(64);
;;     return (amount);
;; }