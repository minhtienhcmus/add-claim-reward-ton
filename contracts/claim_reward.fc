#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

(slice, slice, slice,cell, int, int) load_data() {
    slice ds = get_data().begin_parse();
    return ( ds~load_msg_addr(), 
    ds~load_msg_addr(),
    ds~load_msg_addr(), 
    ds~load_dict(), 
    ds~load_uint(64), 
    ds~load_uint(64));
}

() store_data(slice jetton_usdt, slice owner_address, slice monitor,cell dic, int total_add, int budget) impure {
    ;; slice sl  = dic.begin_parse();
    ;; cell dict_data = sl~load_dict();
    set_data(
        begin_cell()
        .store_slice(jetton_usdt)
        .store_slice(owner_address)
        .store_slice(monitor)
        .store_dict(dic)
        .store_uint(total_add, 64)
        .store_uint(budget, 64)
        .end_cell()
    );
}

() send_tokens(slice recipient, int amount, int query_id,slice jetton_wallet_aff) impure {
    ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, _,_,_) = load_data();
    ;; slice info_pool = info.begin_parse();
    ;; info_pool~load_msg_addr();
    ;; info_pool~load_uint(64);
    ;; slice jetton_wallet_aff = info_pool~load_msg_addr();
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_wallet_aff)
    .store_coins(0)
    .store_uint(1, 107);
  var msg_body = begin_cell()
            .store_uint(op::jetton_transfer(), 32) 
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(recipient)
            .store_slice(recipient)
            .store_uint(0, 1)
            .store_coins(4000000)
            .store_uint(0, 1)
        .end_cell();

  msg = msg.store_ref(msg_body);
  send_raw_message(msg.end_cell(), 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs



    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice usdt_address, slice owner_address,slice monitor_address,cell dict_, int total_add, int budget) = load_data();
    if (op == 1) {
        slice jetton_wallet = in_msg_body~load_msg_addr();
        store_data(jetton_wallet, owner_address, monitor_address, dict_,total_add, budget);
        return ();
    }

    if (op == op::withdraw()) {
      int key = in_msg_body~load_uint(256);
      if(dict_.dict_empty?()){
        return ();
      }
      (slice payload, int success) = dict_.udict_get?(256, key);
      throw_unless(98, success);
      slice add = payload~load_msg_addr();
      int _amount = payload~load_uint(64);
      throw_unless(405, equal_slices(sender_address, add));
      throw_unless(411, _amount > 0);
      send_tokens(sender_address,_amount,query_id,usdt_address);
      cell info_reward = begin_cell()
              .store_slice(add)
              .store_uint(0,64).end_cell();
      dict_~udict_set(256, key, info_reward.begin_parse());
      store_data(usdt_address, owner_address, monitor_address, dict_, total_add, budget);
      return ();
    }
    if (op == op::change_owner()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        store_data(usdt_address, owner_address, monitor_address, dict_,total_add, budget);
        return ();
    }
    if (op == op::change_jetton_wallet()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        slice newJetton = in_msg_body~load_msg_addr();
        store_data(newJetton, owner_address, monitor_address, dict_,total_add, budget);
        return ();
    }

    if (op == op::change_budget()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int new_budget = in_msg_body~load_uint(64);
        store_data(usdt_address, owner_address, monitor_address, dict_,total_add, new_budget);
        return ();
    }

    if (op == op::change_monitor()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor, cell info, cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, monitor_address));
        slice new_monitor = in_msg_body~load_msg_addr();
        store_data(usdt_address, owner_address, new_monitor, dict_, total_add, budget);
        return ();
    }
    if (op == op::claim_token_remain()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int amount = budget - total_add;
        throw_unless(400, amount > 0);
        send_tokens(sender_address,amount,query_id, usdt_address);
        ;; claim remain
        return ();
    }
    if (op == op::claim_token_admin()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int _amount = in_msg_body~load_uint(64);
        throw_unless(400, _amount > 0);
        send_tokens(sender_address,_amount,query_id, usdt_address);
        ;; claim remain
        return ();
    }
    if (op == op::claim_ton_admin()) {
        ;; (int init?, int index, slice campaign_factory, slice owner_address, slice monitor_address, cell info,cell dict_) = load_data();
        throw_unless(405, equal_slices(sender_address, owner_address));
        int withdraw_amount = in_msg_body~load_uint(64);
        throw_unless(400, withdraw_amount > 0);
        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(withdraw_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
        ;; claim remain
        return ();
    }
    if (op == op::add_reward_user()) {
        throw_unless(405, equal_slices(sender_address, owner_address));

        cell dt = in_msg_body~load_ref();
        slice sl  = dt.begin_parse();
        cell dict_data = sl~load_dict();
        int key = 0;
        int success = 1;
        int _total = 0;
        do {
            (slice payload, success) = dict_data.udict_get?(256, key);
            if (success) {
                slice add = payload~load_msg_addr();
                int _amount = payload~load_uint(64);
                int _key = payload~load_uint(64);
                (slice payload_dic, int success_dic) = dict_.udict_get?(256, _key);
                if(success_dic){
                    ;; throw_unless(98, success);
                    slice add = payload_dic~load_msg_addr();
                    int amount = payload_dic~load_uint(64);
                    cell newcell = begin_cell().store_slice(add).store_uint(_amount + amount,64 ).end_cell();
                    dict_~udict_set(256, _key, newcell.begin_parse());
                } else {
                    cell newcell = begin_cell().store_slice(add).store_uint(_amount,64).end_cell();
                    dict_~udict_set(256, _key, newcell.begin_parse());
                }
                _total += _amount;
                ;; store_data( usdt_address, owner_address, monitor_address, dict_, total_add, budget);
            }
             key += 1;
        } until (success ==  0);
        _total += total_add;
        store_data( usdt_address, owner_address, monitor_address, dict_, total_add, budget);

        ;; claim remain
        return ();
    }
    throw(0xffffff);
}

;;
;;  GET Methods
;;

(slice, slice,slice,cell, int, int) get_reward_data() method_id {
  (slice usdt_address, slice owner_address, slice monitor,cell dic, int total_add, int budget) = load_data();
  return (usdt_address, owner_address,monitor, dic, total_add, budget);
}
(slice) get_user_reward(int key) method_id {
   (slice usdt_address, slice owner_address, slice monitor,cell dic, _, _) = load_data();
    (slice payload, int success) = dic.udict_get?(256, key);
    throw_unless(98, success);

    ;; int valid_until = payload~load_uint(64);
    return (payload);
}
(int) get_token_remain() method_id {
   (slice usdt_address, slice owner_address, slice monitor,  cell dic,int total_add, int budget) = load_data();
    int amount = budget - total_add;
    ;; int valid_until = payload~load_uint(64);
    return (amount);
}